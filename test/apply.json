{
	"state": {
		"ownFuncList": [],
		"publicFunclist": [],
		"path": "C:\\\\Myself\\\\xinDoc\\\\test\\\\Rcc.js",
		"funcbody": "{\r\n    //姓\r\n    firstName: '',\r\n    //名\r\n    lastName: ''\r\n  }\r",
		"level": 0,
		"deepFlag": false,
		"closePkFlag": false,
		"commentLines": [],
		"params": [],
		"otherFuncList": {}
	},
	"parentName": {
		"ownFuncList": [],
		"publicFunclist": [],
		"path": "C:\\\\Myself\\\\xinDoc\\\\test\\\\Rcc.js",
		"funcbody": "'lixiaolong'\r",
		"level": 0,
		"deepFlag": false,
		"closePkFlag": false,
		"commentLines": [
			"父亲的名字"
		],
		"params": [],
		"otherFuncList": {}
	},
	"componentDidMount": {
		"ownFuncList": [],
		"publicFunclist": [
			"getNodeWithPropName"
		],
		"path": "C:\\\\Myself\\\\xinDoc\\\\test\\\\Rcc.js",
		"funcbody": "{\r\n    yyds.getNodeWithPropName()\r\n  }\r",
		"level": "5",
		"deepFlag": false,
		"closePkFlag": false,
		"asyncFlag": false,
		"commentLines": [
			"*\r\n   * @level 5\r\n   "
		],
		"params": [],
		"otherFuncList": {}
	},
	"func1": {
		"ownFuncList": [
			"setState"
		],
		"publicFunclist": [],
		"path": "C:\\\\Myself\\\\xinDoc\\\\test\\\\Rcc.js",
		"funcbody": "(num1, num2) => {\r\n    this.setState({\r\n      firstName: num1,\r\n      lastName: num2\r\n    })\r\n    return num1 + num2\r\n  }\r",
		"level": "4",
		"deepFlag": false,
		"closePkFlag": false,
		"commentLines": [
			"*\r\n   * 返回两个树的和\r\n   * @param {*} num1 \r\n   * @param {*} num2 \r\n   * @level 4\r\n   * @returns \r\n   "
		],
		"params": [
			"num1",
			"num2"
		],
		"otherFuncList": {}
	},
	"func2": {
		"ownFuncList": [
			"func1"
		],
		"publicFunclist": [],
		"path": "C:\\\\Myself\\\\xinDoc\\\\test\\\\Rcc.js",
		"funcbody": "(num1, num2) => {\r\n    console.log(this.func1(num1, num2));\r\n    return true\r\n  }\r",
		"level": "3",
		"deepFlag": false,
		"closePkFlag": false,
		"commentLines": [
			"*\r\n   * 输出两数之和(*类型， 变量名: 描述)\r\n   * @param {number} num1 加数\r\n   * @param {number} num2 被加数\r\n   * @returns {boolean} true | false\r\n   * @level 3\r\n   "
		],
		"params": [
			"num1",
			"num2"
		],
		"otherFuncList": {}
	},
	"getPeopleMessage": {
		"ownFuncList": [],
		"publicFunclist": [],
		"path": "C:\\\\Myself\\\\xinDoc\\\\test\\\\Rcc.js",
		"funcbody": "{\r\n    if(!people.name) {\r\n      throw new Error('错误的姓名')\r\n    }\r\n    const {name, age} = people;\r\n    return name + age\r\n  }\r",
		"level": "5",
		"deepFlag": false,
		"closePkFlag": false,
		"asyncFlag": false,
		"commentLines": [
			"*\r\n   * 返回人类的相关信息\r\n   * @author xuhxin <xuhxin@yonyou.com>\r\n   * @param {Object} people 人类\r\n   * @param {string} people.name 姓名\r\n   * @param {string} people.age 年龄\r\n   * @returns {string} 信息\r\n   * @level 5\r\n   * @example\r\n   * getPeopleMessage('xuhxin','24')\r\n   * @throws {Error} 错误的姓名\r\n   "
		],
		"params": [],
		"otherFuncList": {}
	},
	"logFunc": {
		"ownFuncList": [],
		"publicFunclist": [],
		"path": "C:\\\\Myself\\\\xinDoc\\\\test\\\\Rcc.js",
		"funcbody": "{\r\n    console.log(123);\r\n  }\r",
		"level": "3",
		"deepFlag": false,
		"closePkFlag": false,
		"asyncFlag": false,
		"commentLines": [
			"*\r\n   * 空方法\r\n   * @level 3\r\n   "
		],
		"params": [],
		"otherFuncList": {}
	},
	"render": {
		"ownFuncList": [],
		"publicFunclist": [],
		"path": "C:\\\\Myself\\\\xinDoc\\\\test\\\\Rcc.js",
		"funcbody": "{\r\n    return (\r\n      <div>Rcc</div>\r\n    )\r\n  }\r",
		"level": 0,
		"deepFlag": false,
		"closePkFlag": true,
		"asyncFlag": false,
		"commentLines": [],
		"params": [],
		"otherFuncList": {}
	}
}